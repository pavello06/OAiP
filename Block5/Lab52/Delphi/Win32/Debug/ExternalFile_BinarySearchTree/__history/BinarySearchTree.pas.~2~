Unit BinarySearchTree;

Interface

    Procedure Create(BinarySearchTree: TBinarySearchTree; Data: TData);
    Procedure Insert(BinarySearchTree: TBinarySearchTree; Data: TData);
    Procedure Remove(BinarySearchTree: TBinarySearchTree; Data: TData);
    Procedure Clear(BinarySearchTree: TBinarySearchTree);    

Implementation

Type
    TData = Integer;
    TNode = TBinarySearchTree;

    TBinarySearchTree = Record
        Data: TData;
        Left, Right: TNode;
    End;

Procedure Create(BinarySearchTree: TBinarySearchTree; Data: TData);
Begin
    New(BinarySearchTree);
    BinarySearchTree.Data := Data;
    BinarySearchTree.Left := Nil;
    BinarySearchTree.Right := Nil;
End;

Procedure Insert(BinarySearchTree: TBinarySearchTree; Data: TData);
Var
    ParentNode: TNode;
Begin
    If BinarySearchTree = Nil Then
        Create(BinarySearchTree, Data)
    Else
    Begin
        While BinarySearchTree <> Nil Do
        Begin
            ParentNode := BinarySearchTree;
            If BinarySearchTree.Data > Data Then
                BinarySearchTree := BinarySearchTree.Left
            Else
                BinarySearchTree := BinarySearchTree.Right;
        End;
        If ParentNode.Data > Data Then
        Begin
            New(ParentNode.Left);
            BinarySearchTree := ParentNode.Left;
        End
        Else
        Begin
            New(ParentNode.Right);
            BinarySearchTree := ParentNode.Right;
        End;
        BinarySearchTree.Data := Data;
        BinarySearchTree.Left := Nil;
        BinarySearchTree.Right := Nil;
    End;
End;

Procedure Remove(BinarySearchTree: TBinarySearchTree; Data: TData);
Var
    RemovedNode: TNode;
Begin
    While (BinarySearchTree.Data <> Data) And (BinarySearchTree <> Nil) Do
    Begin
        If BinarySearchTree.Data > Data Then
            BinarySearchTree := BinarySearchTree.Left
        Else
            BinarySearchTree := BinarySearchTree.Right;
    End;
    If BinarySearchTree = Nil Then
        Write('Lox');
Else
Begin
    While BinarySearchTree.Left <> Nil Do
    Begin
        BinarySearchTree.Data := BinarySearchTree.Left.Data;
        BinarySearchTree := BinarySearchTree.Left;
    End;
    RemovedNode := BinarySearchTree.Right;
    BinarySearchTree.Data := BinarySearchTree.Right.Data;
    BinarySearchTree.Left := BinarySearchTree.Right.Left;
    BinarySearchTree.Right := BinarySearchTree.Right.Right;
    Dispose(RemovedNide);
End;
End;

Procedure Clear(BinarySearchTree: TBinarySearchTree);
Begin
    If BinarySearchTree <> Nil Then
    Begin
        Clear(BinarySearchTree.Left);
        Clear(BinarySearchTree.Right);
        Dispose(BinarySearchTree);
    End;
End;

End.
