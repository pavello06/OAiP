Program Lab24;
Uses
  System.SysUtils;
Type
    TMatrix = Array Of Array Of Integer;
    TArr = Array Of Integer;
Const
    MIN_O = 1;
    MAX_O = 10;
    MIN_MAT = 1;
    MAX_MAT = 1000000;
    YES = 1;
    NO = 2;
Procedure PrintTask();
Begin
    WriteLn('Данная программа подсчитывает число повторяющихся элементов в матрице.');
    WriteLn;
End;
Function ChooseFileInput() : Boolean;
Var
    IsFileInput: Integer;
    IsCorrect, Choose: Boolean;
Begin
    Repeat
        WriteLn('Вы хотите вводить матрицу через файл? (Да - ', YES, ' / Нет - ', NO, ')');
        Try
            ReadLn(IsFileInput);
            IsCorrect := True;
        Except
            WriteLn('Некорректный выбор!');
        End;
        If IsCorrect Then
        Begin
            If IsFileInput = YES Then
                Choose := True
            Else If IsFileInput = NO Then
                Choose := False
            Else
            Begin
                IsCorrect := False;
                WriteLn('Некорректный выбор!');
            End;
        End;
    Until IsCorrect;
    ChooseFileInput := Choose;
End;
Function  CheckUserArea(Num, MIN, MAX: Integer) : Boolean;
Var
    IsCorrect: Boolean;
Begin
    If (Num < MIN) Or (Num > MAX) Then
    Begin
        Writeln('Значение не попадает в диапазон!');
        IsCorrect := False;
    End
    Else
        IsCorrect := True;
    CheckUserArea := IsCorrect;
End;
Function ReadUserO(Num: Integer; MIN, MAX: Integer) : Integer;
Var
    IsCorrect: Boolean;
Begin
    Repeat
        Write('Введите порядок матрицы N[', MIN, '; ', MAX, ']: ');
        Try
            Readln(Num);
            IsCorrect := True;
        Except
            Writeln('Проверьте корректность ввода данных!');
            IsCorrect := False;
        End;
        If IsCorrect Then
            IsCorrect := CheckUserArea(Num, MIN, MAX);
    Until IsCorrect;
    ReadUserO := Num;
End;
Function ReadUserMatrix(Num: Integer; Row, Col, MIN, MAX: Integer) : Integer;
Var
    IsCorrect: Boolean;
Begin
    Repeat
        Write('Введите в ', (Row + 1), ' строке ', (Col + 1), ' столбце натуральный элемент[', MIN, '; ', MAX,  ']: ');
        Try
            Readln(Num);
            IsCorrect := True;
        Except
            Writeln('Проверьте корректность ввода данных!');
            IsCorrect := False;
        End;
        If IsCorrect Then
            IsCorrect := CheckUserArea(Num, MIN, MAX);
    Until IsCorrect;
    ReadUserMatrix := Num;
End;
Function ReadPathToFile() : String;
Var
    IsCorrect: Boolean;
    PathToFile: String;
Begin
    Repeat
        Write('Введите путь к файлу с расширением .txt с матрицей, у которой разряд не должен превышать ', MAX_O, ', а её натуральные элементы должны лежать в пределе[', MIN_MAT, ': ', MAX_MAT,']: ');
        ReadLn(PathToFile);
        If ExtractFileExt(PathToFile) = '.txt' Then
            IsCorrect := True
        Else
        Begin
            WriteLn('Расширение файла не .txt!');
            IsCorrect := False;
        End;
    Until IsCorrect;
    ReadPathToFile := PathToFile;
End;
Function IsExists(PathToFile: String) : Boolean;
Var
    IsCorrect: Boolean;
Begin
    If FileExists(PathToFile) Then
        IsCorrect := True
    Else
        IsCorrect := False;
    IsExists := IsCorrect;
End;
Function IsAbleToReading(Var F: TextFile) : Boolean;
Var
    IsCorrect: Boolean;
Begin
    Try
        Reset(F);
        CloseFile(F);
        IsCorrect := True;
    Except
        IsCorrect := False;
    End;
    IsAbleToReading := IsCorrect;
End;
Function IsAbleToWriting(PathToFile: String) : Boolean;
Var
    IsCorrect: Boolean;
Begin
    If FileIsReadOnly(PathToFile) Then
        IsCorrect := False
    Else
        IsCorrect := True;
    IsAbleToWriting := IsCorrect;
End;
Function IsEmpty(Var F: TextFile) : Boolean;
Var
    Buf: Char;
    Size: Integer;
    IsCorrect: Boolean;
Begin
    Reset(F);
    Size := 0;
    If Not EOF(F) Then
        Size := 1;
    CloseFile(F);
    If Size = 0 Then
        IsCorrect := True
    Else
        IsCorrect := False;
    IsEmpty := IsCorrect;
End;
Function ReadOrder(Var F: TextFile) : Integer;
Var
    Buf: Char;
    IsCorrect: Boolean;
    Order: Integer;
Begin
    IsCorrect := True;
    Reset(F);
    Try
        Read(F, Order);
    Except
        Writeln('Неправильный порядок матрицы!');
        IsCorrect := False;
    End;
    If IsCorrect Then
        IsCorrect := CheckUserArea(Order, MIN_O, MAX_O);
    If IsCorrect Then
    Begin
        Readln(F, Buf);
        If Buf <> #13 Then
        Begin
            IsCorrect := False;
            Writeln('Неправильный порядок матрицы!');
        End;
    End;
    CloseFile(F);
    If Not IsCorrect Then
        Order := -1;
    ReadOrder := Order;
End;
Function IsRightNums(Var F: TextFile) : Boolean;
Var
    K: Integer;
    IsCorrect: Boolean;
Begin
    IsCorrect := True;
    Reset(F);
    Readln(F);
    While IsCorrect And Not EOF(F) Do
    Begin
        While IsCorrect And Not EOLN(F) Do
        Begin
            Try
                Read(F, K);
            Except
                IsCorrect := False;
                WriteLn('Некорректный тип данных внутри файла!');
            End;
            If IsCorrect Then
                IsCorrect := CheckUserArea(K, MIN_MAT, MAX_MAT);
        End;
        ReadLn(F);
    End;
    CloseFile(F);
    IsRightNums := IsCorrect;
End;
Function IsOrdersEqual(Var F: TextFile; Order: Integer) : Boolean;
Var
    Rows, Cols, K: Integer;
    IsCorrect: Boolean;
Begin
    Rows := 0;
    Reset(F);
    Readln(F);
    IsCorrect := True;
    While IsCorrect And Not EOF(F) Do
    Begin
      Cols := 0;
      While IsCorrect And Not EOLN(F) Do
      Begin
          Read(F, K);
          Inc(Cols);
          IsCorrect := CheckUserArea(Cols, MIN_O, MAX_O);
      End;
      If IsCorrect Then
      Begin
          Readln(F);
          Inc(Rows);
          IsCorrect := CheckUserArea(Rows, MIN_O, MAX_O);
          If Cols <> Order Then
              IsCorrect := False;
      End;
    End;
    CloseFile(F);
    If IsCorrect And (Not Rows = Order) Then
        IsCorrect := False;
    IsOrdersEqual := IsCorrect;
End;
Procedure ReadFileMatrix(Var F: TextFile; Order: Integer; Var Matrix: TMatrix);
Var
    Row, Col: Integer;
Begin
    SetLength(Matrix, Order, Order);
    Reset(F);
    Readln(F);
    For Row := Low(Matrix) To High(Matrix) Do
    Begin
        For Col := Low(Matrix[Row]) To High(Matrix[Row]) Do
            Read(F, Matrix[Row][Col]);
        Readln(F);
    End;
    CloseFile(F);
End;
Procedure ReadFile(Var F: TextFile; Var Matrix: TMatrix);
Var
    IsCorrect: Boolean;
    PathToFile: String;
    Order: Integer;
Begin
    IsCorrect := True;
    Repeat
        PathToFile := ReadPathToFile();
        AssignFile(F, PathToFile);
        If Not IsExists(PathToFile) Then
        Begin
            IsCorrect := False;
            Writeln('Проверьте корректность ввода пути к файлу!');
        End;
        If IsCorrect And Not IsAbleToReading(F) Then
        Begin
            IsCorrect := False;
            Writeln('Файл закрыт для чтения!');
        End;
        If IsCorrect And Not IsAbleToWriting(PathToFile) Then
        Begin
            IsCorrect := False;
            WriteLn('Файл закрыт для записи!');
        End;
        If IsCorrect And IsEmpty(F) Then
        Begin
            IsCorrect := False;
            WriteLn('Файл пуст!');
        End;
        If IsCorrect Then
        Begin
            Order := ReadOrder(F);
            If Order = -1 Then
                IsCorrect := False;
        End;
        If IsCorrect And Not IsRightNums(F) Then
            IsCorrect := False;
        If IsCorrect And Not IsOrdersEqual(F, Order) Then
        Begin
            IsCorrect := False;
            Writeln('Значения порядков не равны!');
        End;
    Until IsCorrect;
    ReadFileMatrix(F, Order, Matrix);
End;
Procedure AddAnswerToFile(Var F: TextFile; ResMatrix: TMatrix);
Var
    I, LenArr: Integer;
Begin
    Append(F);
    WriteLn(F);
    LenArr := Length(ResMatrix);
    I := 0;
    While (I < LenArr) And (ResMatrix[I][1] <> 0) Do
    Begin
        WriteLn(F, 'Число ', ResMatrix[I][0], ' встречается ', ResMatrix[I][1], ' раз(а).');
        Inc(I);
    End;
    CloseFile(F);
End;
Procedure ReadConsole(Var Matrix: TMatrix);
Var
    Row, Col, Order: Integer;
Begin
    Order := ReadUserO(Order, MIN_O, MAX_O);
    SetLength(Matrix, Order, Order);
    For Row := Low(Matrix) To High(Matrix) Do
        For Col := Low(Matrix) To High(Matrix) Do
            Matrix[Row][Col] := ReadUserMatrix(Matrix[Row][Col], Row, Col, MIN_MAT, MAX_MAT);
End;
Procedure CreateArrs(Var Matrix: TMatrix; Var Arr: TArr; Var ResMatrix: TMatrix);
Var
    LenArr, Row, Col, I: Integer;
Begin
    LenArr := Length(Matrix) * Length(Matrix);
    SetLength(Arr, LenArr);
    I := 0;
    For Row := Low(Matrix) To High(Matrix) Do
        For Col := Low(Matrix) To High(Matrix) Do
        Begin
            Arr[I] := Matrix[Row][Col];
            Inc(I);
        End;
    SetLength(ResMatrix, LenArr, LenArr);
End;
Procedure SortArr(Var Arr: TArr);
Var
    I, J, PreviousMaxIndex, Buf: Integer;
Begin
    PreviousMaxIndex := High(Arr) - 1;
    For I := Low(Arr) To High(Arr) Do
        For J := Low(Arr) To PreviousMaxIndex - I Do
            If Arr[J] > Arr[J + 1] Then
            Begin
                Buf := Arr[J];
                Arr[J] := Arr[J + 1];
                Arr[J + 1] := Buf;
            End;
End;
Procedure CalcResCount(Var Arr: TArr; Var ResMatrix: TMatrix);
Var
    Count, I, J, PreviousMaxIndex: Integer;
    IsCorrect: Boolean;
Begin
    Count := 1;
    J := 0;
    PreviousMaxIndex := High(Arr) - 1;
    For I := Low(Arr) To PreviousMaxIndex Do
        If Arr[I] = Arr[I + 1] Then
            Inc(Count)
        Else
        Begin
            ResMatrix[J][0] := Arr[I];
            ResMatrix[J][1] := Count;
            Inc(J);
            Count:= 1;
        End;
    ResMatrix[J][0] := Arr[High(Arr)];
    ResMatrix[J][1] := Count;
End;
Procedure FreeMemory(Var Matrix: TMatrix; Var Arr: TArr; Var ResMatrix: TMatrix);
Begin
    Matrix := Nil;
    Arr := Nil;
    ResMatrix := Nil;
End;
Procedure GetResultFromFile(Var Matrix: TMatrix; Var Arr: TArr; Var ResMatrix: TMatrix);
Var
    F: TextFile;
Begin
    ReadFile(F, Matrix);
    CreateArrs(Matrix, Arr, ResMatrix);
    SortArr(Arr);
    CalcResCount(Arr, ResMatrix);
    AddAnswerToFile(F, ResMatrix);
End;
Procedure GetResultFromConsole(Var Matrix: TMatrix; Var Arr: TArr; Var ResMatrix: TMatrix);
Begin
    ReadConsole(Matrix);
    CreateArrs(Matrix, Arr, ResMatrix);
    SortArr(Arr);
    CalcResCount(Arr, ResMatrix);
End;
Procedure PrintResult(ResMatrix: TMatrix);
Var
    I, LenArr: Integer;
Begin
    WriteLn;
    LenArr := Length(ResMatrix);
    I := 0;
    While (I < LenArr) And (ResMatrix[I][1] <> 0) Do
    Begin
        WriteLn('Число ', ResMatrix[I][0], ' встречается ', ResMatrix[I][1], ' раз(а).');
        Inc(I);
    End;
End;
Var
    Matrix: TMatrix;
    Arr: TArr;
    ResMatrix: TMatrix;
Begin
    PrintTask();
    If ChooseFileInput() Then
        GetResultFromFile(Matrix, Arr, ResMatrix)
    Else
        GetResultFromConsole(Matrix, Arr, ResMatrix);
    PrintResult(ResMatrix);
    FreeMemory(Matrix, Arr, ResMatrix);
    Readln;
End.
